extends layout



block content
  #black
  script(type = 'x-shader/x-vertex', id = 'passThroughVertexShader')
    | varying vec2 vUv;
    | void main()
    | {
    |     vUv = uv;
    |     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    | }
  script(type = 'x-shader/x-fragment', id = 'gsFragmentShader')
    | varying vec2 vUv;
    | uniform float screenWidth;
    | uniform float screenHeight;
    | uniform sampler2D tSource;
    | uniform sampler2D killTex;
    | uniform sampler2D feedTex;
    | uniform float feed;
    | uniform float kill;
    | uniform vec2 brush;
    | uniform float killInfluence;
    | uniform float feedInfluence;
    |  
    | void main()
    | {
    |    float swI = 1.0/screenWidth;
    |    float shI = 1.0/screenHeight;
    |    vec2 texel = vec2(swI, shI);
    |    float step_x = swI;
    |    float step_y = shI;
    |    vec2 uv = texture2D(tSource, vUv).rg;
    |    vec2 uv0 = texture2D(tSource, vUv+vec2(-step_x, 0.0)).rg;
    |    vec2 uv1 = texture2D(tSource, vUv+vec2(step_x, 0.0)).rg;
    |    vec2 uv2 = texture2D(tSource, vUv+vec2(0.0, -step_y)).rg;
    |    vec2 uv3 = texture2D(tSource, vUv+vec2(0.0, step_y)).rg;
    |    
    |    vec2 lapl = (uv0 + uv1 + uv2 + uv3 - 4.0*uv);
    |    vec3 killCol = texture2D(killTex, vUv).rgb;
    |    float killVal = length(killCol) - 0.808174906;
    |    vec3 feedCol = texture2D(feedTex, vUv).rgb;
    |    float feedVal = length(feedCol) - 0.808174906;
    |    float killV = kill + killVal * killInfluence;
    |    float feedV = clamp(feed + feedVal * feedInfluence, 0.0, 1000.0);
    |    float du = 0.2097*lapl.r - uv.r*uv.g*uv.g + feedV*(1.0 - uv.r);
    |    float dv = 0.105*lapl.g + uv.r*uv.g*uv.g - (feedV+killV)*uv.g;
    |    vec2 dst = uv + vec2(du, dv);
    |    
    |    float dist = distance( vec2(vUv.x * screenWidth / screenHeight - brush.x * 1.5, vUv.y), brush );
    |    dst.g -= - 0.1 * (step(0.05, dist) - 1.0);
    |    
    |    gl_FragColor = vec4(dst.r, dst.g, 0.0, 1.0);
    | }
  script(type = 'x-shader/x-fragment', id = 'screenFragmentShader')
    | varying vec2 vUv;
    | uniform float screenWidth;
    | uniform float screenHeight;
    | uniform sampler2D tSource;
    | void main()
    | {
    |     float value = texture2D(tSource, vUv).g;
    |     float value2 = texture2D(tSource, vUv).r;
    |     float v = clamp(.02 / abs(value2 - value),  0.0, 2.0);
    |     float c = value2 - value + 0.85;
    |     float d = clamp( pow( distance( vec2(0.5, 0.5), vUv ) * 4.0,  1.5), 0.0, 1.0);
    |     gl_FragColor = vec4(c, c, c, 1) * v * d - vec4(0.05);
    | }
  script(type = 'x-shader/x-fragment', id = 'screenFragmentShaderInvert')
    | varying vec2 vUv;
    | uniform float screenWidth;
    | uniform float screenHeight;
    | uniform sampler2D tSource;
    | void main()
    | {
    |     float value = texture2D(tSource, vUv).g;
    |     float value2 = texture2D(tSource, vUv).r;
    |     float v = clamp(.02 / abs(value2 - value),  0.0, 2.0);
    |     float c = value2 - value + 0.85;
    |     float d = clamp( pow( distance( vec2(0.5, 0.5), vUv ) * 4.0,  1.5), 0.0, 1.0);
    |     gl_FragColor = vec4(1.0) - clamp( vec4(c, c, c, 1) * v * d  - vec4(0.05),  0.0, 1.0);
    | }
  script(src = 'javascripts/lib/jquery-2.1.1.min.js')
  script(src = 'javascripts/lib/three.min.js')
  script(src = 'javascripts/lib/dat.gui.min.js')
  script(src = 'javascripts/gs.js')
  img#attractor_w(src = '/images/attractor_w.png')
  img#attractor_w_inv(src = '/images/attractor_w_inv.png')